This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: android, node_modules, .expo, .git
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
androidManifestPlugin.js
app-env.d.ts
app.json
App.tsx
babel.config.js
cesconfig.json
eas.json
eslint.config.js
global.css
metro.config.js
nativewind-env.d.ts
package.json
prettier.config.js
src/app/_layout.tsx
src/app/(app)/_layout.tsx
src/app/(app)/home.tsx
src/app/(app)/leaderboard.tsx
src/app/index.tsx
src/components/app-text.tsx
src/components/record-card.tsx
src/components/steps-card.tsx
src/components/ui/pixel-button.tsx
src/components/ui/progress-bar.tsx
src/features/leaderboard/components/leaderboard-item.tsx
src/features/leaderboard/hooks/use-leaderboard.ts
src/features/steps/components/dev-controls.tsx
src/features/steps/components/steps-display.tsx
src/features/steps/hooks/use-steps-animation.ts
src/features/steps/hooks/use-steps-health-api.ts
src/features/steps/utils/level-utils.ts
src/services/leaderboard.ts
src/utils/date-utils.ts
src/utils/error-utils.ts
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="androidManifestPlugin.js">
const { withAndroidManifest } = require('@expo/config-plugins');

module.exports = function androidManifestPlugin(config) {
  return withAndroidManifest(config, async (config) => {
    let androidManifest = config.modResults.manifest;

    androidManifest.application[0].activity[0]['intent-filter'].push({
      action: [
        {
          $: {
            'android:name': 'androidx.health.ACTION_SHOW_PERMISSIONS_RATIONALE',
          },
        },
      ],
    });

    return config;
  });
};
</file>

<file path="app-env.d.ts">
// @ts-ignore
/// <reference types="nativewind/types" />
</file>

<file path="cesconfig.json">
{
  "cesVersion": "2.18.1",
  "projectName": "onemorestep",
  "packages": [
    {
      "name": "nativewind",
      "type": "styling"
    }
  ],
  "flags": {
    "noGit": false,
    "noInstall": false,
    "overwrite": false,
    "importAlias": true,
    "packageManager": "npm",
    "eas": false,
    "publish": false
  },
  "packageManager": {
    "type": "npm",
    "version": "10.9.2"
  },
  "os": {
    "type": "Windows_NT",
    "platform": "win32",
    "arch": "x64",
    "kernelVersion": "10.0.19045"
  }
}
</file>

<file path="eas.json">
{
  "cli": {
    "version": ">= 16.4.1",
    "appVersionSource": "remote"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal"
    },
    "preview": {
      "distribution": "internal"
    },
    "production": {
      "autoIncrement": true
    }
  },
  "submit": {
    "production": {}
  }
}
</file>

<file path="eslint.config.js">
/* eslint-env node */
const { defineConfig } = require('eslint/config');
const expoConfig = require('eslint-config-expo/flat');

module.exports = defineConfig([
  expoConfig,
  {
    ignores: ['dist/*'],
  },
  {
    rules: {
      'react/display-name': 'off',
    },
  },
]);
</file>

<file path="global.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path="metro.config.js">
const { getDefaultConfig } = require('expo/metro-config');
const { withNativeWind } = require('nativewind/metro');

const config = getDefaultConfig(__dirname);

module.exports = withNativeWind(config, { input: './global.css' });
</file>

<file path="nativewind-env.d.ts">
/// <reference types="nativewind/types" />

// NOTE: This file should not be edited and should be committed with your source code. It is generated by NativeWind.
</file>

<file path="prettier.config.js">
module.exports = {
  printWidth: 100,
  tabWidth: 2,
  singleQuote: true,
  bracketSameLine: true,
  trailingComma: 'es5',

  plugins: [require.resolve('prettier-plugin-tailwindcss')],
  tailwindAttributes: ['className'],
};
</file>

<file path="src/app/(app)/_layout.tsx">
import { Tabs } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';
import FontAwesome6 from '@expo/vector-icons/FontAwesome6';
import MaterialCommunityIcons from '@expo/vector-icons/MaterialCommunityIcons';

export default function TabsLayout() {
  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: '#FFFFFF',
        tabBarInactiveTintColor: '#888888',
        tabBarStyle: {
          backgroundColor: '#111111',
          borderTopColor: '#333333',
        },
        headerStyle: {
          backgroundColor: '#000000',
        },
        headerTintColor: '#FFFFFF',
      }}>
      <Tabs.Screen
        name="home"
        options={{
          title: 'My steps',
          tabBarShowLabel: false,
          headerShown: false,
          tabBarIcon: ({ color, size }) => (
            <Ionicons name="footsteps-outline" size={size} color={color} />
          ),
        }}
      />
      <Tabs.Screen
        name="leaderboard"
        options={{
          title: 'Leaderboard',
          tabBarShowLabel: false,
          headerShown: false,
          tabBarIcon: ({ color, size }) => (
            // <Ionicons name="ranking-star" size={size} color={color} />
            <MaterialCommunityIcons name="podium-gold" size={size} color={color} />
          ),
        }}
      />
    </Tabs>
  );
}
</file>

<file path="src/app/index.tsx">
import { Redirect } from 'expo-router';
import { Text, View } from 'react-native';

export default function Index() {
  // Rediriger vers l'onglet principal
  return <Redirect href="/home" />;
  // return (
  //   <View>
  //     <Text>aaaaaaaaaaaa</Text>
  //   </View>
  // );
}
</file>

<file path="src/components/app-text.tsx">
import { Text as RNText, TextProps } from 'react-native';
import { useFonts, DotGothic16_400Regular } from '@expo-google-fonts/dotgothic16';

export function AppText({ style, ...props }: TextProps) {
  const [fontsLoaded] = useFonts({
    DotGothic16_400Regular,
  });

  return (
    <RNText
      style={[{ fontFamily: fontsLoaded ? 'DotGothic16_400Regular' : undefined }, style]}
      {...props}
    />
  );
}
</file>

<file path="src/components/record-card.tsx">
import { View, Text } from 'react-native';

interface RecordCardProps {
  recordSteps: number;
  recordDate: string | null;
  currentSteps: number;
}

export default function RecordCard({ recordSteps, recordDate, currentSteps }: RecordCardProps) {
  const recordProgress = Math.round((currentSteps / recordSteps) * 100);

  return (
    <View className="mb-4 w-11/12 items-center rounded-xl bg-gray-800 p-4">
      <Text className="font-dotgothic text-lg text-yellow-400">Record Personnel</Text>

      <Text className="font-dotgothic text-3xl text-yellow-400">{recordSteps}</Text>

      {recordDate && (
        <Text className="mt-1 font-dotgothic text-xs text-gray-400">{recordDate}</Text>
      )}

      <View className="mt-3 h-2 w-full rounded-full bg-gray-700">
        <View
          className="h-2 rounded-full bg-yellow-400"
          style={{ width: `${Math.min(recordProgress, 100)}%` }}
        />
      </View>

      <Text className="mt-1 font-dotgothic text-xs text-gray-400">
        {recordProgress}% de votre record
      </Text>
    </View>
  );
}
</file>

<file path="src/components/steps-card.tsx">
import { View, Text, ActivityIndicator } from 'react-native';

interface StepsCardProps {
  steps: number;
  yesterdaySteps: number;
  isLoading: boolean;
}

export default function StepsCard({ steps, yesterdaySteps, isLoading }: StepsCardProps) {
  const calculateChange = (): { percent: number; isIncrease: boolean } => {
    if (yesterdaySteps === 0) return { percent: 0, isIncrease: true };

    const change = steps - yesterdaySteps;
    const percent = Math.abs(Math.round((change / yesterdaySteps) * 100));

    return {
      percent: percent,
      isIncrease: change >= 0,
    };
  };

  const { percent, isIncrease } = calculateChange();

  return (
    <View className="mb-4 w-11/12 rounded-xl bg-gray-800 p-5">
      <Text className="mb-2 text-center font-dotgothic text-2xl text-white">Today Steps</Text>

      {isLoading ? (
        <View className="items-center py-4">
          <ActivityIndicator size="large" color="#FFFFFF" />
          <Text className="mt-2 font-dotgothic text-sm text-gray-400">Chargement...</Text>
        </View>
      ) : (
        <View className="items-center">
          <Text className="font-dotgothic text-6xl text-white">{steps}</Text>

          {yesterdaySteps > 0 && (
            <View className="mt-4 items-center">
              <Text className="font-dotgothic text-sm text-gray-400">Hier: {yesterdaySteps}</Text>

              {percent > 0 && (
                <Text
                  className={`font-dotgothic text-lg ${isIncrease ? 'text-green-500' : 'text-red-500'}`}>
                  {isIncrease ? '↑' : '↓'} {percent}%
                </Text>
              )}
            </View>
          )}
        </View>
      )}
    </View>
  );
}
</file>

<file path="src/components/ui/pixel-button.tsx">
// PixelButton.tsx
import React from 'react';
import { TouchableOpacity, View, StyleProp, TextStyle, ViewStyle } from 'react-native';
import { AppText } from '@/components/app-text';
import MaterialIcons from '@expo/vector-icons/MaterialIcons';

// Types de boutons disponibles comme dans l'image
type ButtonType = 'normal' | 'primary' | 'success' | 'warning' | 'error' | 'disabled';

interface PixelButtonProps {
  onPress: () => void;
  text: string;
  type?: ButtonType;
  disabled?: boolean;
  className?: string;
  style?: StyleProp<ViewStyle>;
  textClassName?: string;
  textStyle?: StyleProp<TextStyle>;
}

export const PixelButton: React.FC<PixelButtonProps> = ({
  onPress,
  text,
  type = 'primary',
  disabled = false,
  className = '',
  style = {},
  textClassName = '',
  textStyle = {},
}) => {
  // Si le bouton est désactivé, on force le type à 'disabled'
  const buttonType = disabled ? 'disabled' : type;

  // Définition des couleurs selon le type de bouton
  const getColors = (): { bg: string; textColor: string } => {
    switch (buttonType) {
      case 'normal':
        return { bg: 'bg-black', textColor: 'text-white' };
      case 'primary':
        return { bg: 'bg-blue-500', textColor: 'text-white' };
      case 'success':
        return { bg: 'bg-green-500', textColor: 'text-white' };
      case 'warning':
        return { bg: 'bg-yellow-500', textColor: 'text-black' };
      case 'error':
        return { bg: 'bg-red-500', textColor: 'text-white' };
      case 'disabled':
        return { bg: 'bg-gray-300', textColor: 'text-gray-500' };
      default:
        return { bg: 'bg-blue-500', textColor: 'text-white' };
    }
  };

  const { bg, textColor } = getColors();

  return (
    <View className={`relative ${className}`} style={style}>
      {/* Bordure noire externe */}
      <View className="rounded-md border-2 border-white">
        {/* Fond du bouton et l'effet d'ombre */}
        <View className={` rounded-md border-b-2 border-r-2 border-gray-300`}>
          {/* Le bouton lui-même */}
          <TouchableOpacity
            onPress={onPress}
            disabled={disabled}
            activeOpacity={0.7}
            className={`${bg} rounded-none px-2 py-1`}>
            <View className="flex-row items-center justify-center">
              <AppText className={`${textColor} ml-1 text-lg ${textClassName}`} style={textStyle}>
                {text}
              </AppText>
              <View className="ml-1 mt-1">
                <MaterialIcons name="sync" size={16} color="white" />
              </View>
            </View>
          </TouchableOpacity>
        </View>
      </View>
    </View>
  );
};
</file>

<file path="src/components/ui/progress-bar.tsx">
import React from 'react';
import { View, StyleSheet, StyleProp, ViewStyle, DimensionValue } from 'react-native';
import Animated, { SharedValue, useAnimatedStyle } from 'react-native-reanimated';

export interface PixelProgressBarProps {
  progress: number | SharedValue<number>; // Accepte une valeur normale ou une SharedValue de Reanimated
  maxValue?: number;
  width?: DimensionValue;
  height?: number;
  outerBorderWidth?: number;
  innerBorderWidth?: number;
  backgroundColor?: string;
  fillColor?: string;
  outerBorderColor?: string;
  innerBorderColor?: string;
  showPixelCorners?: boolean;
  style?: StyleProp<ViewStyle>;
}

/**
 * Composant de barre de progression style pixel art/rétro (similaire à NES.css)
 * Avec double bordure : externe (blanche) et interne (noire)
 * Personnalisable en largeur et hauteur
 * Supporte l'animation avec Reanimated
 */
export const ProgressBar: React.FC<PixelProgressBarProps> = ({
  progress,
  maxValue = 10000,
  width = '100%',
  height = 28,
  outerBorderWidth = 4,
  innerBorderWidth = 2,
  backgroundColor = '#333333',
  fillColor = '#92d050',
  outerBorderColor = '#ffffff',
  innerBorderColor = '#000000',
  showPixelCorners = true,
  style,
}) => {
  // Déterminer si progress est une SharedValue ou un nombre simple
  const isSharedValue = typeof progress !== 'number';

  // Style animé pour la barre de progression
  const animatedProgressStyle = useAnimatedStyle(() => {
    // Obtenir la valeur actuelle (soit directement, soit depuis la SharedValue)
    const currentProgress = isSharedValue ? progress.value : progress;

    // S'assurer que la progression est entre 0 et maxValue
    const clampedProgress = Math.max(0, Math.min(currentProgress, maxValue));
    const progressPercentage = (clampedProgress / maxValue) * 100;

    return {
      width: `${progressPercentage}%`,
    };
  });

  // Coins pixelisés pour un effet encore plus rétro
  const renderPixelCorners = () => {
    if (!showPixelCorners) return null;

    const cornerSize = Math.min(outerBorderWidth, 4);

    return (
      <>
        {/* Coin supérieur gauche */}
        <View
          className="absolute left-0 top-0 bg-black"
          style={{ width: cornerSize, height: cornerSize }}
        />
        {/* Coin supérieur droit */}
        <View
          className="absolute right-0 top-0 bg-black"
          style={{ width: cornerSize, height: cornerSize }}
        />
        {/* Coin inférieur gauche */}
        <View
          className="absolute bottom-0 left-0 bg-black"
          style={{ width: cornerSize, height: cornerSize }}
        />
        {/* Coin inférieur droit */}
        <View
          className="absolute bottom-0 right-0 bg-black"
          style={{ width: cornerSize, height: cornerSize }}
        />
      </>
    );
  };

  // Styles définis avec StyleSheet pour optimiser les performances
  const styles = StyleSheet.create({
    container: {
      width,
      height,
      backgroundColor: outerBorderColor,
      padding: outerBorderWidth,
    },
    innerBorder: {
      width: '100%',
      height: '100%',
      backgroundColor: innerBorderColor,
      padding: innerBorderWidth,
    },
    background: {
      width: '100%',
      height: '100%',
      backgroundColor,
      overflow: 'hidden',
    },
    progress: {
      height: '100%',
      backgroundColor: fillColor,
    },
    line: {
      position: 'absolute',
      width: '100%',
      height: 1,
      backgroundColor: 'rgba(0, 0, 0, 0.1)',
    },
  });

  return (
    <View className="relative shadow-md" style={[styles.container, style]}>
      {renderPixelCorners()}

      {/* Conteneur avec bordure interne noire */}
      <View className="h-full w-full" style={styles.innerBorder}>
        {/* Conteneur du fond de la barre et de la progression */}
        <View className="h-full w-full overflow-hidden" style={styles.background}>
          {/* Barre de progression animée */}
          <Animated.View className="h-full" style={[styles.progress, animatedProgressStyle]} />
        </View>
      </View>
    </View>
  );
};
</file>

<file path="src/features/leaderboard/components/leaderboard-item.tsx">
import { View, Text } from 'react-native';

interface LeaderboardItemProps {
  rank: number;
  user: string;
  steps: number;
  isCurrentUser: boolean;
}

export default function LeaderboardItem({
  rank,
  user,
  steps,
  isCurrentUser,
}: LeaderboardItemProps) {
  return (
    <View
      className={`mx-2 my-1 flex-row items-center justify-between rounded-lg p-4 ${isCurrentUser ? 'bg-blue-900' : 'bg-gray-800'}`}>
      <View className="flex-row items-center">
        <View
          className={`h-8 w-8 items-center justify-center rounded-full ${getRankBackgroundColor(rank)}`}>
          <Text className="font-dotgothic font-bold text-white">{rank}</Text>
        </View>

        <Text className="ml-3 font-dotgothic text-lg text-white">
          {user} {isCurrentUser && '👤'}
        </Text>
      </View>

      <Text className="font-dotgothic text-xl text-white">{steps}</Text>
    </View>
  );
}

function getRankBackgroundColor(rank: number): string {
  switch (rank) {
    case 1:
      return 'bg-yellow-500'; // Or
    case 2:
      return 'bg-gray-400'; // Argent
    case 3:
      return 'bg-yellow-700'; // Bronze
    default:
      return 'bg-gray-700'; // Autres rangs
  }
}
</file>

<file path="src/features/leaderboard/hooks/use-leaderboard.ts">
import { useState, useEffect } from 'react';
import { getLeaderboard, getCurrentUserRank } from '../../../services/leaderboard';

interface LeaderboardUser {
  id: string;
  name: string;
  steps: number;
}

export default function useLeaderboard() {
  const [leaderboard, setLeaderboard] = useState<LeaderboardUser[]>([]);
  const [currentUserRank, setCurrentUserRank] = useState<LeaderboardUser | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchLeaderboard = async () => {
      setIsLoading(true);
      try {
        // Dans un vrai scénario, ces données viendraient d'une API
        // Pour l'instant, on utilise des données fictives
        const leaderboardData = await getLeaderboard();
        const userRank = await getCurrentUserRank();

        setLeaderboard(leaderboardData);
        setCurrentUserRank(userRank);
      } catch (error) {
        console.error('Erreur lors de la récupération du classement:', error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchLeaderboard();
  }, []);

  return { leaderboard, isLoading, currentUserRank };
}
</file>

<file path="src/features/steps/components/dev-controls.tsx">
import React from 'react';
import { TouchableOpacity } from 'react-native';
import { AppText } from '@/components/app-text';

interface DevControlsProps {
  devMode: boolean;
  setDevMode: (mode: boolean) => void;
  resetDevCounter: () => void;
}

export const DevControls: React.FC<DevControlsProps> = ({
  devMode,
  setDevMode,
  resetDevCounter,
}) => {
  return (
    <>
      <TouchableOpacity
        className="mt-6 rounded-lg bg-gray-800 p-3"
        onPress={() => setDevMode(!devMode)}>
        <AppText className="text-white">
          {devMode ? 'Mode Dev: ON (+500 pas/refresh)' : 'Mode Dev: OFF'}
        </AppText>
      </TouchableOpacity>

      {devMode && (
        <TouchableOpacity className="mt-3 rounded-lg bg-red-800 p-3" onPress={resetDevCounter}>
          <AppText className="text-white">Reset Dev Counter</AppText>
        </TouchableOpacity>
      )}
    </>
  );
};
</file>

<file path="src/features/steps/components/steps-display.tsx">
import React from 'react';
import { View } from 'react-native';
import { SharedValue } from 'react-native-reanimated';
import { AppText } from '@/components/app-text';
import { ProgressBar } from '@/components/ui/progress-bar';
import { DevControls } from './dev-controls';
import { LevelInfo } from '../utils/level-utils';

interface StepsDisplayProps {
  displayedSteps: number;
  animatedProgress: SharedValue<number>;
  yesterdaySteps: number;
  levelInfo: LevelInfo;
  devMode: boolean;
  setDevMode: (mode: boolean) => void;
  resetDevCounter: () => void;
}

export const StepsDisplay: React.FC<StepsDisplayProps> = ({
  displayedSteps,
  animatedProgress,
  yesterdaySteps,
  levelInfo,
  devMode,
  setDevMode,
  resetDevCounter,
}) => {
  return (
    <>
      <View className="flex-1 items-center">
        <View className="items-center">
          <AppText className="mb-5 text-2xl text-white">Lv {levelInfo.currentLevel}</AppText>
          {/* ↑ */}
          {/* <AppText className="mb-5 text-3xl text-white">{displayedSteps}</AppText> */}
        </View>
        <View className="w-1/2">
          <AppText className="text-base text-white">next level</AppText>

          <ProgressBar
            progress={animatedProgress}
            maxValue={levelInfo.totalStepsForCurrentLevel}
            width="100%"
            height={12}
            outerBorderWidth={2}
            innerBorderWidth={2}
            outerBorderColor="#ffffff"
            innerBorderColor="#000000"
            backgroundColor="#333333"
            fillColor="#fecdd3"
          />
        </View>

        <DevControls devMode={devMode} setDevMode={setDevMode} resetDevCounter={resetDevCounter} />
      </View>

      <View className="w-full items-center pb-10">
        <AppText className="text-lg text-white">{`Yesterday: ${yesterdaySteps}`}</AppText>
      </View>
    </>
  );
};
</file>

<file path="src/features/steps/hooks/use-steps-animation.ts">
// src/features/steps/hooks/use-steps-animation.ts
import { useEffect, useState } from 'react';
import {
  useSharedValue,
  withTiming,
  withDelay,
  withSequence,
  Easing,
} from 'react-native-reanimated';
import { calculateLevelInfo, hasLeveledUp, LevelInfo } from '../utils/level-utils';

export const useStepAnimation = (currentSteps: number, previousSteps: number = 0) => {
  const [displayedSteps, setDisplayedSteps] = useState(previousSteps);
  const [levelInfo, setLevelInfo] = useState<LevelInfo>(calculateLevelInfo(previousSteps));

  // Valeurs animées pour le compteur et la barre de progression
  const animatedStepsValue = useSharedValue(previousSteps);
  const animatedProgress = useSharedValue(calculateLevelInfo(previousSteps).progressInCurrentLevel);

  // Animation lorsque les pas changent
  useEffect(() => {
    if (currentSteps > 0) {
      const currentLevelInfo = calculateLevelInfo(currentSteps);
      const previousLevelInfo = calculateLevelInfo(previousSteps);
      const leveledUp = hasLeveledUp(previousSteps, currentSteps);

      // Mettre à jour les informations de niveau
      setLevelInfo(currentLevelInfo);

      if (leveledUp) {
        // Animation spéciale pour le passage de niveau
        // 1. Remplir la barre jusqu'à 1000 (fin du niveau précédent)
        // 2. Réinitialiser la barre à 0
        // 3. Remplir jusqu'à la nouvelle progression
        animatedProgress.value = withSequence(
          // Étape 1: Remplir jusqu'à 1000 (fin du niveau)
          withTiming(1000, {
            duration: 300,
            easing: Easing.out(Easing.cubic),
          }),
          // Étape 2: Petite pause pour montrer le niveau complet
          withDelay(150, withTiming(1000, { duration: 0 })),
          // Étape 3: Réinitialiser à 0 (nouveau niveau)
          withTiming(0, {
            duration: 200,
            easing: Easing.inOut(Easing.cubic),
          }),
          // Étape 4: Remplir jusqu'à la nouvelle progression
          withTiming(currentLevelInfo.progressInCurrentLevel, {
            duration: 500,
            easing: Easing.out(Easing.cubic),
          })
        );
      } else {
        // Animation normale (pas de changement de niveau)
        animatedProgress.value = withDelay(
          300,
          withTiming(currentLevelInfo.progressInCurrentLevel, {
            duration: 500,
            easing: Easing.out(Easing.cubic),
          })
        );
      }

      // Animation du compteur de pas (inchangée)
      animatedStepsValue.value = withDelay(
        300,
        withTiming(currentSteps, {
          duration: 800,
          easing: Easing.out(Easing.cubic),
        })
      );

      console.log(`Animation démarrée: de ${previousSteps} à ${currentSteps}`, {
        leveledUp,
        previousLevel: previousLevelInfo.currentLevel,
        currentLevel: currentLevelInfo.currentLevel,
        progressInLevel: currentLevelInfo.progressInCurrentLevel,
      });
    }
  }, [currentSteps, previousSteps]);

  // Mise à jour de l'affichage selon la valeur animée
  useEffect(() => {
    const updateDisplayedSteps = () => {
      const valueToDisplay = Math.round(animatedStepsValue.value);
      setDisplayedSteps(valueToDisplay);
    };

    const intervalId = setInterval(updateDisplayedSteps, 16); // ~60fps
    return () => clearInterval(intervalId);
  }, [animatedStepsValue.value]);

  return {
    displayedSteps,
    animatedStepsValue,
    animatedProgress,
    levelInfo, // Nouvelles informations de niveau
  };
};
</file>

<file path="src/features/steps/hooks/use-steps-health-api.ts">
import { useEffect, useState } from 'react';
import { initialize, requestPermission, readRecords } from 'react-native-health-connect';
import { TimeRangeFilter } from 'react-native-health-connect/lib/typescript/types/base.types';
import { Platform } from 'react-native';

type StepsBySource = {
  [key: string]: number;
};

export const useSteps = (selectedDate: Date = new Date()) => {
  const [steps, setSteps] = useState(0);
  const [yesterdaySteps, setYesterdaySteps] = useState(0);
  const [stepsBySource, setStepsBySource] = useState<StepsBySource>({});
  const [selectedSource, setSelectedSource] = useState<string>('');
  const [isLoading, setIsLoading] = useState(false);

  // Fonction pour calculer le nombre total de pas à partir d'une réponse Health Connect
  const calculateTotalSteps = (
    response: any
  ): { maxSteps: number; maxSource: string; stepsBySource: StepsBySource } => {
    if (!response || !response.records || response.records.length === 0) {
      return { maxSteps: 0, maxSource: '', stepsBySource: {} };
    }

    // Grouper par source
    const sourcesMap: StepsBySource = {};
    response.records.forEach((record: any) => {
      const source = record.metadata?.dataOrigin || 'inconnu';
      if (!sourcesMap[source]) {
        sourcesMap[source] = 0;
      }
      sourcesMap[source] += record.count;
    });

    // Trouver la source avec le plus grand nombre de pas
    let maxSteps = 0;
    let maxSource = '';

    Object.entries(sourcesMap).forEach(([source, count]) => {
      if (count > maxSteps) {
        maxSteps = count;
        maxSource = source;
      }
    });

    return { maxSteps, maxSource, stepsBySource: sourcesMap };
  };

  const getStepsForDate = async (date: Date) => {
    // Créer la plage de temps pour la date (de minuit à minuit)
    const startOfDay = new Date(date);
    startOfDay.setHours(0, 0, 0, 0);

    const endOfDay = new Date(date);
    endOfDay.setHours(23, 59, 59, 999);

    // Filtre de temps pour la journée
    const timeRangeFilter: TimeRangeFilter = {
      operator: 'between',
      startTime: startOfDay.toISOString(),
      endTime: endOfDay.toISOString(),
    };

    // Lecture des enregistrements de pas
    try {
      const stepsResponse = await readRecords('Steps', { timeRangeFilter });
      return stepsResponse;
    } catch (error) {
      console.error(`Erreur lors de la récupération des pas pour ${date.toDateString()}:`, error);
      return null;
    }
  };

  // Fonction pour charger les données de santé
  const loadHealthData = async (date: Date) => {
    if (Platform.OS !== 'android') {
      return;
    }

    setIsLoading(true);

    try {
      // Initialisation du client Health Connect
      const isInitialized = await initialize();
      if (!isInitialized) {
        console.log('Failed to initialize Health Connect');
        setIsLoading(false);
        return;
      }

      // Demande permission pour les pas
      const grantedPermissions = await requestPermission([
        { accessType: 'read', recordType: 'Steps' },
      ]);

      // Vérifie si la permission pour les pas a été accordée
      const hasStepsPermission = grantedPermissions.some((perm) => perm.recordType === 'Steps');

      if (!hasStepsPermission) {
        console.log('No permission for Steps');
        setIsLoading(false);
        return;
      }

      // POUR TESTS: Décommentez et modifiez ces lignes pour tester avec des dates spécifiques
      /*
      // Test: Définir une plage de dates personnalisée pour le jour actuel
      const customStartDate = new Date('2024-05-08T00:00:00'); // Format YYYY-MM-DDTHH:MM:SS
      const customEndDate = new Date('2024-05-08T23:59:59');   // Format YYYY-MM-DDTHH:MM:SS
      
      // Remplacez date par customStartDate dans les appels ci-dessous
      // Et utilisez ces dates pour les tests
      console.log('Test: Plage de dates personnalisée', {
        start: customStartDate.toLocaleString(),
        end: customEndDate.toLocaleString()
      });
      */

      // 1. Récupérer les pas pour la date sélectionnée
      const todayResponse = await getStepsForDate(date);
      const { maxSteps, maxSource, stepsBySource: sourcesMap } = calculateTotalSteps(todayResponse);

      // 2. Récupérer les pas pour la veille
      const yesterday = new Date(date);
      yesterday.setDate(yesterday.getDate() - 1);
      const yesterdayResponse = await getStepsForDate(yesterday);
      const { maxSteps: yesterdayMaxSteps } = calculateTotalSteps(yesterdayResponse);

      // Mettre à jour l'état
      setSteps(maxSteps);
      setYesterdaySteps(yesterdayMaxSteps);
      setStepsBySource(sourcesMap);
      setSelectedSource(maxSource);
    } catch (error) {
      console.error('Erreur:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // useEffect(() => {
  //   loadHealthData(selectedDate);
  // }, [selectedDate]);

  // Fonction pour obtenir un nom convivial pour une source
  // const getSourceDisplayName = (source: string): string => {
  //   return sourceDisplayNames[source] || source;
  // };

  // Fonction pour formater une date
  const formatDate = (date: Date): string => {
    return date.toLocaleDateString('fr-FR', {
      weekday: 'long',
      day: 'numeric',
      month: 'long',
    });
  };

  return {
    steps,
    yesterdaySteps,
    stepsBySource,
    selectedSource,
    //getSourceDisplayName,
    isLoading,
    loadHealthData,
    formatDate,
  };
};
</file>

<file path="src/features/steps/utils/level-utils.ts">
// src/features/steps/utils/level-utils.ts

export interface LevelInfo {
  currentLevel: number;
  progressInCurrentLevel: number;
  progressPercentage: number;
  stepsToNextLevel: number;
  totalStepsForCurrentLevel: number;
}

const STEPS_PER_LEVEL = 1000;

/**
 * Calcule les informations de niveau basées sur le nombre total de pas
 */
export const calculateLevelInfo = (totalSteps: number): LevelInfo => {
  // Le niveau actuel (commence à 0)
  const currentLevel = Math.floor(totalSteps / STEPS_PER_LEVEL);

  // Les pas dans le niveau actuel (reste de la division)
  const progressInCurrentLevel = totalSteps % STEPS_PER_LEVEL;

  // Pourcentage de progression dans le niveau actuel
  const progressPercentage = (progressInCurrentLevel / STEPS_PER_LEVEL) * 100;

  // Pas nécessaires pour atteindre le niveau suivant
  const stepsToNextLevel = STEPS_PER_LEVEL - progressInCurrentLevel;

  // Total de pas nécessaires pour compléter le niveau actuel
  const totalStepsForCurrentLevel = STEPS_PER_LEVEL;

  return {
    currentLevel,
    progressInCurrentLevel,
    progressPercentage,
    stepsToNextLevel,
    totalStepsForCurrentLevel,
  };
};

/**
 * Vérifie si l'utilisateur vient de passer un niveau
 */
export const hasLeveledUp = (previousSteps: number, currentSteps: number): boolean => {
  const previousLevel = Math.floor(previousSteps / STEPS_PER_LEVEL);
  const currentLevel = Math.floor(currentSteps / STEPS_PER_LEVEL);

  return currentLevel > previousLevel;
};

/**
 * Obtient le nombre de niveaux gagnés
 */
export const getLevelsGained = (previousSteps: number, currentSteps: number): number => {
  const previousLevel = Math.floor(previousSteps / STEPS_PER_LEVEL);
  const currentLevel = Math.floor(currentSteps / STEPS_PER_LEVEL);

  return Math.max(0, currentLevel - previousLevel);
};
</file>

<file path="src/services/leaderboard.ts">
// Ce service simule des appels API pour récupérer le classement
// Dans une application réelle, ces fonctions feraient des appels à votre backend

interface LeaderboardUser {
  id: string;
  name: string;
  steps: number;
}

// Données fictives de classement
const mockLeaderboard: LeaderboardUser[] = [
  { id: '1', name: 'Sophie', steps: 12453 },
  { id: '2', name: 'Thomas', steps: 11289 },
  { id: '3', name: 'Julie', steps: 10876 },
  { id: '4', name: 'Vous', steps: 8567 }, // L'utilisateur actuel
  { id: '5', name: 'Maxime', steps: 7921 },
  { id: '6', name: 'Léa', steps: 6543 },
  { id: '7', name: 'Antoine', steps: 5432 },
  { id: '8', name: 'Emma', steps: 4983 },
  { id: '9', name: 'Lucas', steps: 3254 },
  { id: '10', name: 'Chloé', steps: 2198 },
];

// Simuler une récupération des données de classement
export async function getLeaderboard(): Promise<LeaderboardUser[]> {
  // Simulation d'un délai réseau
  await new Promise((resolve) => setTimeout(resolve, 1000));

  // Trier par nombre de pas décroissant
  return [...mockLeaderboard].sort((a, b) => b.steps - a.steps);
}

// Récupérer le rang de l'utilisateur actuel
export async function getCurrentUserRank(): Promise<LeaderboardUser | null> {
  // Simulation d'un délai réseau
  await new Promise((resolve) => setTimeout(resolve, 800));

  // Dans une vraie application, vous identifieriez l'utilisateur par son ID
  return mockLeaderboard.find((user) => user.id === '4') || null;
}

// Mettre à jour les pas de l'utilisateur actuel
export async function updateUserSteps(steps: number): Promise<void> {
  // Simulation d'un délai réseau
  await new Promise((resolve) => setTimeout(resolve, 500));

  // Dans une vraie application, vous mettriez à jour les données sur le serveur
  const currentUser = mockLeaderboard.find((user) => user.id === '4');
  if (currentUser) {
    currentUser.steps = steps;
  }
}
</file>

<file path="src/utils/date-utils.ts">
/**
 * Vérifie si la date fournie est aujourd'hui
 * @param date Date à vérifier
 * @returns Vrai si la date est aujourd'hui, faux sinon
 */
export const isToday = (date: Date): boolean => {
  const today = new Date();
  return (
    date.getDate() === today.getDate() &&
    date.getMonth() === today.getMonth() &&
    date.getFullYear() === today.getFullYear()
  );
};

/**
 * Formate une date dans un format lisible en français
 * @param date Date à formater
 * @returns Chaîne formatée (ex: "lundi 10 mai")
 */
export const formatDate = (date: Date): string => {
  return date.toLocaleDateString('fr-FR', {
    weekday: 'long',
    day: 'numeric',
    month: 'long',
  });
};

/**
 * Obtient la date d'hier
 * @param date Date de référence (aujourd'hui par défaut)
 * @returns Une nouvelle date représentant hier
 */
export const getYesterday = (date: Date = new Date()): Date => {
  const yesterday = new Date(date);
  yesterday.setDate(yesterday.getDate() - 1);
  return yesterday;
};
</file>

<file path="src/utils/error-utils.ts">
export const getErrorMessage = (error: unknown): string => {
  if (error instanceof Error) {
    return error.message;
  }
  if (typeof error === 'string') {
    return error;
  }
  if (error && typeof error === 'object' && 'message' in error) {
    return String(error.message);
  }
  return 'Unknown error';
};
</file>

<file path=".gitignore">
node_modules/
.expo/
dist/
npm-debug.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision
*.orig.*
web-build/
repomix-output.xml



ios
android

# macOS
.DS_Store

# Temporary files created by Metro to check the health of the file watcher
.metro-health-check*
</file>

<file path="app.json">
{
  "expo": {
    "scheme": "onemorestep",
    "name": "onemorestep",
    "slug": "onemorestep",
    "version": "1.0.0",
    "web": {
      "favicon": "./assets/favicon.png",
      "bundler": "metro"
    },
    "experiments": {
      "tsconfigPaths": true
    },
    "plugins": [
      "expo-font",
      "expo-router",
      "expo-health-connect",
      "./androidManifestPlugin.js",
      [
        "expo-build-properties",
        {
          "android": {
            "compileSdkVersion": 35,
            "targetSdkVersion": 35,
            "buildToolsVersion": "35.0.0",
            "minSdkVersion": 26
          }
        }
      ],
      "expo-router"
    ],
    "orientation": "portrait",
    "icon": "./assets/icon.png",
    "userInterfaceStyle": "light",
    "splash": {
      "image": "./assets/splash.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "assetBundlePatterns": ["**/*"],
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.anonymous.onemorestep",
      "permissions": [
        "android.permission.health.READ_STEPS",
        "android.permission.health.READ_FLOORS_CLIMBED",
        "android.permission.health.READ_DISTANCE"
      ]
    },
    "extra": {
      "eas": {
        "projectId": "9b2db50d-23a7-461e-b830-7c9ab149ed11"
      }
    }
  }
}
</file>

<file path="App.tsx">
import { useFonts, DotGothic16_400Regular } from '@expo-google-fonts/dotgothic16';
import './global.css';
import { Text, View, TouchableOpacity, ActivityIndicator } from 'react-native';
import { useState } from 'react';
import useHealthData from '@/hooks/useHealthData';

export default function App() {
  const [fontsLoaded] = useFonts({
    DotGothic16_400Regular,
  });

  // État pour la date sélectionnée
  const [selectedDate, setSelectedDate] = useState(new Date());

  // Utiliser le hook avec la date sélectionnée
  const { steps, yesterdaySteps, selectedSource, getSourceDisplayName, isLoading, formatDate } =
    useHealthData(selectedDate);

  // Fonction pour changer de jour
  const changeDay = (direction: 'previous' | 'next') => {
    const newDate = new Date(selectedDate);
    if (direction === 'previous') {
      newDate.setDate(newDate.getDate() - 1);
    } else {
      // Empêcher la sélection d'une date future
      const today = new Date();
      if (newDate < today) {
        newDate.setDate(newDate.getDate() + 1);
      }
    }
    setSelectedDate(newDate);
  };

  // Fonction pour vérifier si la date est aujourd'hui
  const isToday = (date: Date): boolean => {
    const today = new Date();
    return (
      date.getDate() === today.getDate() &&
      date.getMonth() === today.getMonth() &&
      date.getFullYear() === today.getFullYear()
    );
  };

  // Obtenir un texte convivial pour la date
  const getDateText = (): string => {
    if (isToday(selectedDate)) {
      return 'Today';
    } else {
      return formatDate(selectedDate);
    }
  };

  // Calculer le pourcentage de changement par rapport à la veille
  const calculateChange = (): { percent: number; isIncrease: boolean } => {
    if (yesterdaySteps === 0) return { percent: 0, isIncrease: true };

    const change = steps - yesterdaySteps;
    const percent = Math.abs(Math.round((change / yesterdaySteps) * 100));

    return {
      percent: percent,
      isIncrease: change >= 0,
    };
  };

  const { percent, isIncrease } = calculateChange();

  if (!fontsLoaded) {
    return null;
  }

  return (
    <View className="flex-1 items-center justify-center bg-black">
      {/* Sélecteur de date */}
      <View className="mb-6 w-full flex-row items-center justify-center px-4">
        <TouchableOpacity
          onPress={() => changeDay('previous')}
          className="rounded-full bg-gray-800 p-2">
          <Text className="font-dotgothic text-xl text-white">←</Text>
        </TouchableOpacity>

        <View className="flex-1 items-center">
          <Text className="mx-4 font-dotgothic text-xl text-white">{getDateText()}</Text>
        </View>

        <TouchableOpacity
          onPress={() => changeDay('next')}
          className="rounded-full bg-gray-800 p-2"
          disabled={isToday(selectedDate)}
          style={{ opacity: isToday(selectedDate) ? 0.5 : 1 }}>
          <Text className="font-dotgothic text-xl text-white">→</Text>
        </TouchableOpacity>
      </View>

      {isLoading ? (
        <ActivityIndicator size="large" color="#FFFFFF" />
      ) : (
        <View className="items-center">
          <Text className="mb-1 font-dotgothic text-6xl text-white">{steps}</Text>
          <Text className="mb-2 font-dotgothic text-2xl text-white">steps</Text>

          {/* {selectedSource && steps > 0 && (
            <Text className="mt-2 font-dotgothic text-sm text-gray-400">
              Source : {getSourceDisplayName(selectedSource)}
            </Text>
          )} */}

          {/* Comparaison avec la veille */}
          {isToday(selectedDate) && yesterdaySteps > 0 && (
            <View className="mt-6 items-center">
              <Text className="font-dotgothic text-xl text-gray-400">
                Yesterday: {yesterdaySteps}
              </Text>

              {/* {percent > 0 && (
                <View className="mt-2 flex-row items-center">
                  <Text
                    className={`font-dotgothic text-lg ${isIncrease ? 'text-green-500' : 'text-red-500'}`}>
                    {isIncrease ? '↑' : '↓'} {percent}%
                  </Text>
                  <Text className="ml-2 font-dotgothic text-sm text-gray-400">vs hier</Text>
                </View>
              )} */}
            </View>
          )}
          <Text className="font-dotgothic text-xl text-gray-400">Highest: 12556</Text>
        </View>
      )}
    </View>
  );
}
</file>

<file path="babel.config.js">
module.exports = function (api) {
  api.cache(true);

  return {
    presets: [['babel-preset-expo', { jsxImportSource: 'nativewind' }], 'nativewind/babel'],

    plugins: ['react-native-reanimated/plugin'],
  };
};
</file>

<file path="src/app/_layout.tsx">
//import { ThemeProvider } from '@react-navigation/native';
import { Stack } from 'expo-router';
import * as SplashScreen from 'expo-splash-screen';
import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { StyleSheet, View } from 'react-native';
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import '../../global.css';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { Toaster } from 'sonner-native';

// import { APIProvider } from '@/api';
// import { useThemeConfig } from '@/lib';

export { ErrorBoundary } from 'expo-router';

export const unstable_settings = {
  initialRouteName: '(app)',
};

// Empêcher l'écran de démarrage de se cacher automatiquement
SplashScreen.preventAutoHideAsync();

export default function RootLayout() {
  return (
    <>
      <StatusBar style="auto" />
      <SafeAreaProvider>
        <GestureHandlerRootView>
          <Stack>
            <Stack.Screen name="(app)" options={{ headerShown: false }} />
          </Stack>
          <Toaster
            position="bottom-center"
            swipeToDismissDirection="up"
            closeButton={true}
            toastOptions={{
              style: {
                backgroundColor: '#111111',
                borderWidth: 1,
                borderColor: '#FFFFFF',
                borderRadius: 8,
                // shadowColor: '#000000',
                // shadowOffset: { width: 0, height: 2 },
                // shadowOpacity: 0.8,
                // shadowRadius: 4,
                elevation: 5, // Pour Android
              },
              titleStyle: {
                color: '#FFFFFF',
                fontFamily: 'DotGothic16_400Regular', // Utilisez votre police pixel
                fontSize: 16,
              },
              descriptionStyle: {
                color: '#CCCCCC',
                fontFamily: 'DotGothic16_400Regular',
                fontSize: 14,
              },
            }}
          />
        </GestureHandlerRootView>
      </SafeAreaProvider>
    </>
  );
}

// function Providers({ children }) {
//   return <View style={styles.container}>{children}</View>;
// }

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});
</file>

<file path="src/app/(app)/home.tsx">
// src/app/(app)/home.tsx
import { View, ActivityIndicator, ScrollView, RefreshControl } from 'react-native';
import { useCallback, useEffect, useMemo, useState } from 'react';
import { SafeAreaView } from 'react-native-safe-area-context';
import { AppText } from '@/components/app-text';
import { StepsDisplay } from '@/features/steps/components/steps-display';
import { useSteps } from '@/features/steps/hooks/use-steps-health-api';
import { useStepAnimation } from '@/features/steps/hooks/use-steps-animation';
import { getErrorMessage } from '@/utils/error-utils';
import { getLevelsGained } from '@/features/steps/utils/level-utils';
import { toast } from 'sonner-native';

export default function HomeScreen() {
  const [refreshing, setRefreshing] = useState(false);
  const [dataLoaded, setDataLoaded] = useState(false);
  const [previousSteps, setPreviousSteps] = useState(0);
  const [devMode, setDevMode] = useState(false);
  const [refreshCount, setRefreshCount] = useState(0);
  const [syncError, setSyncError] = useState<string | null>(null);

  const today = useMemo(() => new Date(), []);

  const { steps: originalSteps, yesterdaySteps, isLoading, loadHealthData } = useSteps(today);

  const steps = devMode ? originalSteps + refreshCount * 500 : originalSteps;

  const { displayedSteps, animatedProgress, levelInfo } = useStepAnimation(steps, previousSteps);

  const showSyncNotification = (newSteps: number, oldSteps: number, hasError: boolean) => {
    if (hasError) {
      toast.error('Sync failed', {
        description: 'Unable to sync your steps',
        duration: 4000,
      });
      return;
    }

    const stepsDiff = newSteps - oldSteps;
    const levelsGained = getLevelsGained(oldSteps, newSteps);

    if (levelsGained > 0) {
      // Notification spéciale pour le passage de niveau
      toast.success(`🎉 Level Up!`, {
        description: `You reached level ${levelInfo.currentLevel}!`,
        duration: 5000,
      });
    }
    if (stepsDiff > 0) {
      toast.success(`${stepsDiff} steps added!`, {
        duration: 3000,
      });
    } else if (oldSteps === 0 && newSteps === 0) {
      toast('No step to add', {
        description: 'Start walking to track your steps',
        duration: 3000,
      });
    } else {
      toast('No more step to add', {
        description: 'Your steps are up to date',
        duration: 3000,
      });
    }
  };

  const resetDevCounter = () => {
    setRefreshCount(0);
    setPreviousSteps(originalSteps);
    console.log('Compteur développement réinitialisé');
  };

  // Préparation avant rafraîchissement des données
  const handleBeforeRefresh = useCallback(() => {
    setPreviousSteps(steps);
  }, [steps]);

  // Chargement initial des données
  const handleLoadData = useCallback(async () => {
    handleBeforeRefresh();
    try {
      setSyncError(null);
      await loadHealthData(today);
      setDataLoaded(true);
    } catch (error) {
      const errorMessage = getErrorMessage(error);
      setSyncError(errorMessage);
      console.error('Error loading initial data:', error);
    }
  }, [loadHealthData, today, handleBeforeRefresh]);

  // Gestion du rafraîchissement par pull-to-refresh
  const onRefresh = useCallback(async () => {
    setRefreshing(true);
    const oldSteps = steps; // Capturer les pas avant le refresh
    handleBeforeRefresh();

    try {
      setSyncError(null);
      await loadHealthData(today);
      setDataLoaded(true);

      // En mode développement, incrémenter le compteur de refreshes
      if (devMode) {
        setRefreshCount((prev) => prev + 1);
      }

      // Afficher la notification après la synchronisation réussie
      // On utilise une petite attente pour que les états soient mis à jour
      setTimeout(() => {
        const newSteps = devMode ? originalSteps + (refreshCount + 1) * 500 : originalSteps;
        showSyncNotification(newSteps, oldSteps, false);
      }, 100);
    } catch (error) {
      const errorMessage = getErrorMessage(error);
      setSyncError(errorMessage);
      showSyncNotification(0, 0, true);
      console.error('Error during refresh:', error);
    } finally {
      setRefreshing(false);
    }
  }, [loadHealthData, today, handleBeforeRefresh, devMode, steps, originalSteps, refreshCount]);

  // Charger les données au démarrage
  useEffect(() => {
    if (!dataLoaded && !isLoading) {
      handleLoadData();
    }
  }, [dataLoaded, isLoading, handleLoadData]);

  return (
    <SafeAreaView className="flex-1 bg-black">
      <ScrollView
        contentContainerStyle={{ flexGrow: 1 }}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            progressBackgroundColor="#000"
            colors={['#FFFFFF']}
          />
        }>
        <View className="mb-20 items-center justify-center">
          <View className="mb-20 items-center">
            <AppText className="text-sm text-slate-500">Pull down to sync your steps</AppText>
            <AppText className="text-sm text-slate-500">↓</AppText>
          </View>
          <AppText className="mb-10 text-3xl text-white">Today</AppText>
          <AppText className="text-5xl text-white">{displayedSteps}</AppText>
          <AppText className="text-base text-slate-300">
            {displayedSteps > 0 ? 'steps' : 'step'}
          </AppText>
        </View>

        {isLoading && !refreshing ? (
          <View className="flex-1 items-center justify-center">
            <ActivityIndicator size="large" color="#FFFFFF" />
            <AppText className="mt-3 text-white">Chargement des données...</AppText>
          </View>
        ) : (
          <StepsDisplay
            displayedSteps={displayedSteps}
            animatedProgress={animatedProgress}
            yesterdaySteps={yesterdaySteps}
            levelInfo={levelInfo}
            devMode={devMode}
            setDevMode={setDevMode}
            resetDevCounter={resetDevCounter}
          />
        )}
      </ScrollView>
    </SafeAreaView>
  );
}
</file>

<file path="src/app/(app)/leaderboard.tsx">
import { View, Text, FlatList, ActivityIndicator } from 'react-native';
import { useFonts, DotGothic16_400Regular } from '@expo-google-fonts/dotgothic16';
import useLeaderboard from '@/features/leaderboard/hooks/use-leaderboard';
import LeaderboardItem from '@/features/leaderboard/components/leaderboard-item';
import { SafeAreaView } from 'react-native-safe-area-context';

export default function LeaderboardScreen() {
  const [fontsLoaded] = useFonts({
    DotGothic16_400Regular,
  });

  const { leaderboard, isLoading, currentUserRank } = useLeaderboard();

  if (!fontsLoaded) {
    return null;
  }

  return (
    <SafeAreaView className="flex-1 bg-black">
      <Text className="my-4 text-center font-dotgothic text-2xl text-white">Classement</Text>

      {isLoading ? (
        <View className="flex-1 items-center justify-center">
          <ActivityIndicator size="large" color="#FFFFFF" />
        </View>
      ) : (
        <FlatList
          data={leaderboard}
          keyExtractor={(item) => item.id}
          renderItem={({ item, index }) => (
            <LeaderboardItem
              rank={index + 1}
              user={item.name}
              steps={item.steps}
              isCurrentUser={item.id === currentUserRank?.id}
            />
          )}
          ListEmptyComponent={
            <Text className="p-4 text-center font-dotgothic text-white">
              Aucune donnée de classement disponible
            </Text>
          }
        />
      )}
    </SafeAreaView>
  );
}
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./src/**/*.{js,jsx,ts,tsx}'],

  presets: [require('nativewind/preset')],
  theme: {
    extend: {
      fontFamily: {
        dotgothic: ['DotGothic16_400Regular'],
      },
    },
  },
  plugins: [],
};
</file>

<file path="tsconfig.json">
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "jsx": "react-jsx",

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}
</file>

<file path="package.json">
{
  "name": "onemorestep",
  "version": "1.0.0",
  "scripts": {
    "android": "expo run:android",
    "ios": "expo run:ios",
    "start": "expo start",
    "prebuild": "expo prebuild",
    "lint": "eslint \"**/*.{js,jsx,ts,tsx}\" && prettier -c \"**/*.{js,jsx,ts,tsx,json}\"",
    "format": "eslint \"**/*.{js,jsx,ts,tsx}\" --fix && prettier \"**/*.{js,jsx,ts,tsx,json}\" --write",
    "web": "expo start --web"
  },
  "dependencies": {
    "@expo-google-fonts/dotgothic16": "^0.3.0",
    "@expo/vector-icons": "^14.1.0",
    "expo": "~53.0.8",
    "expo-build-properties": "~0.14.6",
    "expo-constants": "~17.1.6",
    "expo-dev-client": "~5.1.8",
    "expo-font": "~13.3.1",
    "expo-health-connect": "^0.1.1",
    "expo-linking": "~7.1.4",
    "expo-router": "~5.0.6",
    "expo-splash-screen": "~0.30.8",
    "expo-status-bar": "~2.2.3",
    "nativewind": "latest",
    "react": "19.0.0",
    "react-native": "0.79.2",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-health-connect": "^3.3.2",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.10.0",
    "react-native-svg": "15.11.2",
    "sonner-native": "^0.20.0"
  },
  "devDependencies": {
    "@babel/core": "^7.20.0",
    "@types/react": "~19.0.10",
    "eslint": "^9.25.1",
    "eslint-config-expo": "^9.2.0",
    "eslint-config-prettier": "^10.1.2",
    "expo-build-properties": "^0.14.6",
    "prettier": "^3.2.5",
    "prettier-plugin-tailwindcss": "^0.5.11",
    "tailwindcss": "^3.4.0",
    "typescript": "~5.8.3"
  },
  "main": "expo-router/entry",
  "private": true
}
</file>

</files>
